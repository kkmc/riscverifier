    // Loads values from byte-sized memory
    define loadByte_macro (mem: [bv64]bv8, addr: bv64): bv8 = (mem)[addr];
    define loadHalf_macro (mem: [bv64]bv8, addr: bv64): bv16 = (loadByte_macro(mem, (addr + 1bv64)) ++ loadByte_macro(mem, addr));
    define loadWord_macro (mem: [bv64]bv8, addr: bv64): bv32 = (loadHalf_macro(mem, (addr + 2bv64)) ++ loadHalf_macro(mem, addr));
    define loadDouble_macro (mem: [bv64]bv8, addr: bv64): bv64 = (loadWord_macro(mem, (addr + 4bv64)) ++ loadWord_macro(mem, addr));
    // Aliases to the load value macros above
    define deref_1(mem: [bv64]bv8, addr: bv64): bv8 = loadByte_macro(mem, addr);
    define deref_2(mem: [bv64]bv8, addr: bv64): bv16 = loadHalf_macro(mem, addr);
    define deref_4(mem: [bv64]bv8, addr: bv64): bv32 = loadWord_macro(mem, addr);
    define deref_8(mem: [bv64]bv8, addr: bv64): bv64 = loadDouble_macro(mem, addr);
    // Memory updates to byte-sized memory
    define mem_update_byte(memP: [bv64]bv8, index: bv64, value: bv8): [bv64]bv8 = memP[index -> value];
    define mem_update_half(memP: [bv64]bv8, index: bv64, value: bv16): [bv64]bv8 = mem_update_byte(mem_update_byte(memP, index, value[7:0]), index+1bv64, value[15:8]);
    define mem_update_word(memP: [bv64]bv8, index: bv64, value: bv32): [bv64]bv8 = mem_update_half(mem_update_half(memP, index, value[15:0]), index+2bv64, value[31:16]);
    define mem_update_double(memP: [bv64]bv8, index: bv64, value: bv64): [bv64]bv8 = mem_update_word(mem_update_word(memP, index, value[31:0]), index+4bv64, value[63:32]);
    // Instruction specifications
    procedure [inline] amoswap_w_aq_proc()
      modifies pc;
      {
        pc = (pc + 4bv64); 
      }
    procedure [inline] amoor_w_proc()
      modifies pc;
      {
        pc = (pc + 4bv64); 
      }
    procedure [inline] amoor_w_aq_proc()
      modifies pc;
      {
        pc = (pc + 4bv64); 
      }
    procedure [inline] add_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = (rs1 + rs2); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] sub_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = (rs1 - rs2); 
        pc = (pc + 4bv64); 
      }
    // TODO: Check semantics
    procedure [inline] mul_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = (rs1 * rs2); 
        pc = (pc + 4bv64);
      }
    // FIXME: Implement
    procedure [inline] div_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = 0bv64; 
        pc = (pc + 4bv64); 
      }
    // FIXME: Implement
    procedure [inline] rem_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = 0bv64; 
        pc = (pc + 4bv64); 
      }
 
    procedure [inline] sll_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_left_shift((rs2 & 63bv64), rs1); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] slt_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        if((rs1 < rs2))
          {
            ret = 1bv64; 
          }
        else
          {
            ret = 0bv64; 
          }
        pc = (pc + 4bv64); 
      }
    procedure [inline] sltu_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        if((rs1 <_u rs2))
          {
            ret = 1bv64; 
          }
        else
          {
            ret = 0bv64; 
          }
        pc = (pc + 4bv64); 
      }
    procedure [inline] xor_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = (rs1 ^ rs2); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] srl_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_l_right_shift((rs2 & 63bv64), rs1); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] sra_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_a_right_shift((rs2 & 63bv64), rs1); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] or_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = (rs1 | rs2); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] and_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = (rs1 & rs2); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] addw_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_sign_extend(32, ((rs1 + rs2))[31:0]); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] subw_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_sign_extend(32, ((rs1 - rs2))[31:0]); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] sllw_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_sign_extend(32, bv_left_shift(bv_zero_extend(27, (rs2)[4:0]), (rs1)[31:0])); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] srlw_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_sign_extend(32, bv_l_right_shift(bv_zero_extend(27, (rs2)[4:0]), (rs1)[31:0])); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] sraw_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_sign_extend(32, bv_a_right_shift(bv_zero_extend(27, (rs2)[4:0]), (rs1)[31:0])); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] jalr_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc, returned;
      {
        ret = (pc + 4bv64); 
        returned = 1bv1;
        pc = ((rs1 + imm)[63:1] ++ 0bv1); 
      }
    procedure [inline] mret_proc()
      modifies pc;
      {
        // FIXME: Fill out the actual specs of this instruction.
        pc = 0bv64;
      }
    procedure [inline] lb_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_sign_extend(56, loadByte_macro(mem, rs1 + imm)); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] lh_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_sign_extend(48, loadHalf_macro(mem, rs1 + imm)); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] lw_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_sign_extend(32, loadWord_macro(mem, rs1 + imm)); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] lbu_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_zero_extend(56, loadByte_macro(mem, rs1 + imm)); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] lhu_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_zero_extend(48, loadHalf_macro(mem, rs1 + imm)); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] addi_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = (rs1 + imm); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] slti_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        if((rs1 < imm))
          {
            ret = 1bv64; 
          }
        else
          {
            ret = 0bv64; 
          }
        pc = (pc + 4bv64); 
      }
    procedure [inline] sltiu_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        if((rs1 <_u imm))
          {
            ret = 1bv64; 
          }
        else
          {
            ret = 0bv64; 
          }
        pc = (pc + 4bv64); 
      }
    procedure [inline] xori_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = (rs1 ^ imm); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] ori_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = (rs1 | imm); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] andi_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = (rs1 & imm); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] slli_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        assume (imm <_u 64bv64);
        ret = bv_left_shift(imm, rs1); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] srli_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        assume (imm <_u 64bv64);
        ret = bv_l_right_shift(imm, rs1);
        pc = (pc + 4bv64); 
      }
    procedure [inline] srai_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        assume (imm <_u 64bv64);
        ret = bv_a_right_shift(imm, rs1);
        pc = (pc + 4bv64); 
      }
    // FIXME: Implement wfi instruction 
    procedure [inline] wfi_proc()
      modifies pc;
      {
        pc = (pc + 4bv64);
      }
    procedure [inline] fence_proc()
      modifies pc;
      {
        pc = (pc + 4bv64); 
      }
    procedure [inline] fence_i_proc()
      modifies pc;
      {
        pc = (pc + 4bv64); 
      }
    procedure [inline] sfence_vma_proc()
      modifies pc;
      {
        pc = (pc + 4bv64); 
      }
    procedure [inline] lwu_proc(rs1 :bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_zero_extend(32, loadWord_macro(mem, rs1 + imm)); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] ld_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = loadDouble_macro(mem, rs1 + imm); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] addiw_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_sign_extend(32, ((rs1[31:0] + imm[31:0]))[31:0]); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] slliw_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_sign_extend(32, bv_left_shift((imm)[31:0], (rs1)[31:0])); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] srliw_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_sign_extend(32, bv_l_right_shift((imm)[31:0], (rs1)[31:0])); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] sraiw_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = bv_sign_extend(32, bv_a_right_shift((imm)[31:0], (rs1)[31:0])); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] sb_proc(rs1: bv64, imm: bv64, rs2: bv64) returns ()
      modifies pc, mem;
      {
        mem[rs1 + imm] = rs2[7:0]; 
        pc = (pc + 4bv64); 
      }
    procedure [inline] sh_proc(rs1: bv64, imm: bv64, rs2: bv64) returns ()
      modifies pc, mem;
      {
        mem[rs1 + imm] = rs2[7:0];
        mem[rs1 + imm + 1bv64] = rs2[15:8];
        pc = (pc + 4bv64);
      }
    procedure [inline] sw_proc(rs1: bv64, imm: bv64, rs2: bv64) returns ()
      modifies pc, mem;
      {
        mem[rs1 + imm] = rs2[7:0];
        mem[rs1 + imm + 1bv64] = rs2[15:8];
        mem[rs1 + imm + 2bv64] = rs2[23:16];
        mem[rs1 + imm + 3bv64] = rs2[31:24];
        pc = (pc + 4bv64); 
      }
    procedure [inline] sd_proc(rs1: bv64, imm: bv64, rs2: bv64) returns ()
      modifies pc, mem;
      {
        mem[rs1 + imm] = rs2[7:0];
        mem[rs1 + imm + 1bv64] = rs2[15:8];
        mem[rs1 + imm + 2bv64] = rs2[23:16];
        mem[rs1 + imm + 3bv64] = rs2[31:24];
        mem[rs1 + imm + 4bv64] = rs2[39:32];
        mem[rs1 + imm + 5bv64] = rs2[47:40];
        mem[rs1 + imm + 6bv64] = rs2[55:48];
        mem[rs1 + imm + 7bv64] = rs2[63:56];
        pc = (pc + 4bv64); 
      }
    procedure [inline] beq_proc(rs1: bv64, rs2: bv64, imm: bv64) returns ()
      modifies pc;
      {
        if((rs1 == rs2))
          {
            pc = imm; 
          }
        else
          {
            pc = (pc + 4bv64); 
          }
      }
    procedure [inline] bne_proc(rs1: bv64, rs2: bv64, imm: bv64) returns ()
      modifies pc;
      {
        if(!((rs1 == rs2)))
          {
            pc = imm; 
          }
        else
          {
            pc = (pc + 4bv64); 
          }
      }
    procedure [inline] blt_proc(rs1: bv64, rs2: bv64, imm: bv64) returns ()
      modifies pc;
      {
        if((rs1 < rs2))
          {
            pc = imm; 
          }
        else
          {
            pc = (pc + 4bv64); 
          }
      }
    procedure [inline] bge_proc(rs1: bv64, rs2: bv64, imm: bv64) returns ()
      modifies pc;
      {
        if(!((rs1 < rs2)))
          {
            pc = imm; 
          }
        else
          {
            pc = (pc + 4bv64); 
          }
      }
    procedure [inline] bltu_proc(rs1: bv64, rs2: bv64, imm: bv64) returns ()
      modifies pc;
      {
        if((rs1 <_u rs2))
          {
            pc = imm; 
          }
        else
          {
            pc = (pc + 4bv64); 
          }
      }
    procedure [inline] bgeu_proc(rs1: bv64, rs2: bv64, imm: bv64) returns ()
      modifies pc;
      {
        if(!((rs1 <_u rs2)))
          {
            pc = imm; 
          }
        else
          {
            pc = (pc + 4bv64); 
          }
      }
    procedure [inline] lui_proc(imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret =  bv_sign_extend(32, bv_left_shift(12bv32, 0bv12 ++ imm[19:0])); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] auipc_proc(imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = (pc + bv_left_shift(12bv64, imm)); 
        pc = (pc + 4bv64); 
      }
    procedure [inline] jal_proc(imm: bv64) returns (ret: bv64)
      modifies pc;
      {
        ret = (pc + 4bv64); 
        pc = imm; 
      }
    procedure [inline] csrrw_proc(csr: bv64, rs1: bv64) returns (csr_ret: bv64, rd_ret: bv64)
      modifies pc;
      {
        assume ((current_priv <_u (csr)[9:8]) || ((0bv64 <_u rs1) && !(((csr)[11:10] <_u 3bv2))));
        csr_ret, rd_ret = rs1, csr; 
        pc = (pc + 4bv64); 
      }
    procedure [inline] csrrs_proc(csr: bv64, rs1: bv64) returns (csr_ret: bv64, rd_ret: bv64)
      modifies pc;
      {
        assume ((current_priv <_u (csr)[9:8]) || ((0bv64 <_u rs1) && !(((csr)[11:10] <_u 3bv2))));
        csr_ret, rd_ret = (rs1 | csr), csr;
        pc = (pc + 4bv64); 
      }
    procedure [inline] csrrc_proc(csr: bv64, rs1: bv64) returns (csr_ret: bv64, rd_ret: bv64)
      modifies pc;
      {
        assume ((current_priv <_u (csr)[9:8]) || ((0bv64 <_u rs1) && !(((csr)[11:10] <_u 3bv2))));
        csr_ret, rd_ret = ((rs1) & csr), csr;
        pc = (pc + 4bv64);
      }
    procedure [inline] csrrwi_proc(csr: bv64, imm: bv64) returns (csr_ret: bv64, rd_ret: bv64)
      modifies pc;
      {
        assume ((current_priv <_u (csr)[9:8]) || (true && !(((csr)[11:10] <_u 3bv2))));
        csr_ret, rd_ret = bv_zero_extend(59, imm[4:0]), csr;
        pc = (pc + 4bv64); 
      }
    procedure [inline] csrrsi_proc(csr: bv64, imm: bv64) returns (csr_ret: bv64, rd_ret: bv64)
      modifies pc;
      {
        assume ((current_priv <_u (csr)[9:8]) || (true && !(((csr)[11:10] <_u 3bv2))));
        csr_ret, rd_ret = (bv_zero_extend(59, imm[4:0]) | csr), csr; 
        pc = (pc + 4bv64); 
      }
    procedure [inline] csrrci_proc(csr: bv64, imm: bv64) returns (csr_ret: bv64, rd_ret: bv64)
      modifies pc;
      {
        assume ((current_priv <_u (csr)[9:8]) || (true && !(((csr)[11:10] <_u 3bv2))));
        csr_ret, rd_ret = ((bv_zero_extend(59, imm[4:0])) & csr), csr; 
        pc = (pc + 4bv64);
      }
      
