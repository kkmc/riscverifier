module main {
  define loadByte_macro (addr: bv64): bv8 = (mem)[addr];
  define loadHalf_macro (addr: bv64): bv16 = (loadByte_macro((addr + 1bv64)) ++ loadByte_macro(addr));
  define loadWord_macro (addr: bv64): bv32 = (loadHalf_macro((addr + 2bv64)) ++ loadHalf_macro(addr));
  define loadDouble_macro (addr: bv64): bv64 = (loadWord_macro((addr + 4bv64)) ++ loadWord_macro(addr));
  procedure [inline] add_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = (rs1 + rs2); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] sub_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = (rs1 - rs2); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] sll_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_left_shift((rs2 & 63bv64), rs1); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] slt_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      if((rs1 < rs2))
        {
          ret = 1bv64; // line 0
        }
      else
        {
          ret = 0bv64; // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] sltu_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      if((rs1 <_u rs2))
        {
          ret = 1bv64; // line 0
        }
      else
        {
          ret = 0bv64; // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] xor_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = (rs1 ^ rs2); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] srl_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_l_right_shift((rs2 & 63bv64), rs1); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] sra_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_a_right_shift((rs2 & 63bv64), rs1); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] or_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = (rs1 | rs2); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] and_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = (rs1 & rs2); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] addw_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_sign_extend(32, ((rs1 + rs2))[31:0]); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] subw_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_sign_extend(32, ((rs1 - rs2))[31:0]); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] sllw_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_sign_extend(32, bv_left_shift(bv_zero_extend(27, (rs2)[4:0]), (rs1)[31:0])); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] srlw_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_sign_extend(32, bv_l_right_shift(bv_zero_extend(27, (rs2)[4:0]), (rs1)[31:0])); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] sraw_proc(rs1: bv64, rs2: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_sign_extend(32, bv_a_right_shift(bv_zero_extend(27, (rs2)[4:0]), (rs1)[31:0])); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] jalr_proc(index: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = (pc + 4bv64); // line 0
      pc = ((index)[63:1] ++ 0bv1); // line 0
    }
  procedure [inline] lb_proc(index: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_sign_extend(56, loadByte_macro(index)); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] lh_proc(index: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_sign_extend(48, loadHalf_macro(index)); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] lw_proc(index: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_sign_extend(32, loadWord_macro(index)); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] lbu_proc(index: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_zero_extend(56, loadByte_macro(index)); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] lhu_proc(index: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_zero_extend(48, loadHalf_macro(index)); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] addi_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = (rs1 + imm); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] slti_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      if((rs1 < imm))
        {
          ret = 1bv64; // line 0
        }
      else
        {
          ret = 0bv64; // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] sltiu_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      if((rs1 <_u imm))
        {
          ret = 1bv64; // line 0
        }
      else
        {
          ret = 0bv64; // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] xori_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = (rs1 ^ imm); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] ori_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = (rs1 | imm); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] andi_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = (rs1 & imm); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] slli_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc, exception;
    {
      if(!((imm <_u 64bv64)))
        {
          exception = 2bv64; // line 0
        }
      else
        {
          ret = bv_left_shift(imm, rs1); // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] srli_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc, exception;
    {
      if(!((imm <_u 64bv64)))
        {
          exception = 2bv64; // line 0
        }
      else
        {
          ret = bv_l_right_shift(imm, rs1); // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] srai_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc, exception;
    {
      if(!((imm <_u 64bv64)))
        {
          exception = 2bv64; // line 0
        }
      else
        {
          ret = bv_a_right_shift(imm, rs1); // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] fence_proc()
    modifies pc;
    {
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] sfence_vma_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = 0bv64; // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] lwu_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_zero_extend(32, loadWord_macro((rs1 + imm))); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] ld_proc(index: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = loadDouble_macro(index); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] addiw_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_sign_extend(32, ((rs1 + imm))[31:0]); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] slliw_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_sign_extend(32, bv_left_shift((imm)[31:0], (rs1)[31:0])); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] srliw_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_sign_extend(32, bv_l_right_shift((imm)[31:0], (rs1)[31:0])); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] sraiw_proc(rs1: bv64, imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_sign_extend(32, bv_a_right_shift((imm)[31:0], (rs1)[31:0])); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] sb_proc(addr: bv64, rs2: bv8) returns ()
    modifies pc, mem;
    {
      pc = (pc + 4bv64); // line 0
      mem[addr] = rs2; // line 0
    }
  procedure [inline] sh_proc(addr: bv64, rs2: bv16) returns ()
    modifies pc, mem;
    {
      pc = (pc - 4bv64); // line 0
      call () = sb_proc(addr, (rs2)[7:0]); // line 0
      call () = sb_proc(addr + 1bv64, (rs2)[15:8]); // line 0
    }
  procedure [inline] sw_proc(addr: bv64, rs2: bv32) returns ()
    modifies pc, mem;
    {
      pc = (pc - 4bv64); // line 0
      call () = sh_proc(addr, (rs2)[15:0]); // line 0
      call () = sh_proc(addr + 2bv64, (rs2)[31:16]); // line 0
    }
  procedure [inline] sd_proc(addr: bv64, rs2: bv64) returns ()
    modifies pc, mem;
    {
      pc = (pc - 4bv64); // line 0
      call () = sw_proc(addr, (rs2)[31:0]); // line 0
      call () = sw_proc(addr + 4bv64, (rs2)[63:32]); // line 0
    }
  procedure [inline] beq_proc(rs1: bv64, rs2: bv64, imm: bv64) returns ()
    modifies pc;
    {
      if((rs1 == rs2))
        {
          pc = imm; // line 0
        }
      else
        {
          pc = (pc + 4bv64); // line 0
        }
    }
  procedure [inline] bne_proc(rs1: bv64, rs2: bv64, imm: bv64) returns ()
    modifies pc;
    {
      if(!((rs1 == rs2)))
        {
          pc = imm; // line 0
        }
      else
        {
          pc = (pc + 4bv64); // line 0
        }
    }
  procedure [inline] blt_proc(rs1: bv64, rs2: bv64, imm: bv64) returns ()
    modifies pc;
    {
      if((rs1 < rs2))
        {
          pc = imm; // line 0
        }
      else
        {
          pc = (pc + 4bv64); // line 0
        }
    }
  procedure [inline] bge_proc(rs1: bv64, rs2: bv64, imm: bv64) returns ()
    modifies pc;
    {
      if(!((rs1 < rs2)))
        {
          pc = imm; // line 0
        }
      else
        {
          pc = (pc + 4bv64); // line 0
        }
    }
  procedure [inline] bltu_proc(rs1: bv64, rs2: bv64, imm: bv64) returns ()
    modifies pc;
    {
      if((rs1 <_u rs2))
        {
          pc = imm; // line 0
        }
      else
        {
          pc = (pc + 4bv64); // line 0
        }
    }
  procedure [inline] bgeu_proc(rs1: bv64, rs2: bv64, imm: bv64) returns ()
    modifies pc;
    {
      if(!((rs1 <_u rs2)))
        {
          pc = imm; // line 0
        }
      else
        {
          pc = (pc + 4bv64); // line 0
        }
    }
  procedure [inline] lui_proc(imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = bv_left_shift(12bv64, imm); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] auipc_proc(imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = (pc + bv_left_shift(12bv64, imm)); // line 0
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] jal_proc(imm: bv64) returns (ret: bv64)
    modifies pc;
    {
      ret = (pc + 4bv64); // line 0
      pc = imm; // line 0
    }
  procedure [inline] csrrw_proc(csr: bv64, rs1: bv64) returns (csr_ret: bv64, rd_ret: bv64)
    modifies pc, exception;
    {
      if(((current_priv <_u (csr)[9:8]) || ((0bv64 <_u rs1) && !(((csr)[11:10] <_u 3bv2)))))
        {
          exception = 2bv64; // line 0
        }
      else
        {
          csr_ret, rd_ret = rs1, csr; // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] csrrs_proc(csr: bv64, rs1: bv64) returns (csr_ret: bv64, rd_ret: bv64)
    modifies pc, exception;
    {
      if(((current_priv <_u (csr)[9:8]) || ((0bv64 <_u rs1) && !(((csr)[11:10] <_u 3bv2)))))
        {
          exception = 2bv64; // line 0
        }
      else
        {
          csr_ret, rd_ret = (rs1 | csr), csr; // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] csrrc_proc(csr: bv64, rs1: bv64) returns (csr_ret: bv64, rd_ret: bv64)
    modifies pc, exception;
    {
      if(((current_priv <_u (csr)[9:8]) || ((0bv64 <_u rs1) && !(((csr)[11:10] <_u 3bv2)))))
        {
          exception = 2bv64; // line 0
        }
      else
        {
          csr_ret, rd_ret = ((rs1) & csr), csr; // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] csrrwi_proc(csr: bv64, imm: bv5) returns (csr_ret: bv64, rd_ret: bv64)
    modifies pc, exception;
    {
      if(((current_priv <_u (csr)[9:8]) || (true && !(((csr)[11:10] <_u 3bv2)))))
        {
          exception = 2bv64; // line 0
        }
      else
        {
          csr_ret, rd_ret = bv_zero_extend(59, imm), csr; // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] csrrsi_proc(csr: bv64, imm: bv5) returns (csr_ret: bv64, rd_ret: bv64)
    modifies pc, exception;
    {
      if(((current_priv <_u (csr)[9:8]) || (true && !(((csr)[11:10] <_u 3bv2)))))
        {
          exception = 2bv64; // line 0
        }
      else
        {
          csr_ret, rd_ret = (bv_zero_extend(59, imm) | csr), csr; // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
  procedure [inline] csrrci_proc(csr: bv64, imm: bv5) returns (csr_ret: bv64, rd_ret: bv64)
    modifies pc, exception;
    {
      if(((current_priv <_u (csr)[9:8]) || (true && !(((csr)[11:10] <_u 3bv2)))))
        {
          exception = 2bv64; // line 0
        }
      else
        {
          csr_ret, rd_ret = ((bv_zero_extend(59, imm)) & csr), csr; // line 0
        }
      pc = (pc + 4bv64); // line 0
    }
    



  var a0: bv64;
  var a1: bv64;
  var a4: bv64;
  var a5: bv64;
  var mtvec: bv64;
  var pmpaddr0: bv64;
  var pmpcfg0: bv64;
  var ra: bv64;
  var s0: bv64;
  var sp: bv64;
  var t0: bv64;
  var zero: bv64;
  var pc: bv64;
  var mem: [bv64]bv8;
  var current_priv: bv2;
  var exception: bv64;

  procedure [inline] atomic_block_0x84c() 
    modifies pc, t0, ra, a5, exception, sp, pmpcfg0, zero, s0, mem, mtvec, a4, a0, current_priv, pmpaddr0, a1;
    {

      call (sp) = addi_proc(sp, -48bv64);
      call () = sd_proc(sp + 40bv64, s0);
      call (s0) = addi_proc(sp, 48bv64);
      call () = sd_proc(s0 + -40bv64, a0);
      call () = sd_proc(s0 + -48bv64, a1);
      call (pmpcfg0, a5) = csrrs_proc(pmpcfg0, zero);
      call () = sd_proc(s0 + -24bv64, a5);
      call (a5) = ld_proc(s0 + -24bv64);
      call () = sd_proc(s0 + -32bv64, a5);
      call (a5) = ld_proc(s0 + -32bv64);
      call (a5) = andi_proc(a5, -256bv64);
      call (a4) = ld_proc(s0 + -48bv64);
      call (a5) = or_proc(a4, a5);
      call () = sd_proc(s0 + -48bv64, a5);
      call (a5) = ld_proc(s0 + -40bv64);
      call (a4) = ld_proc(s0 + -48bv64);
      call (t0) = auipc_proc(0bv64);
      call (t0) = addi_proc(t0, 24bv64);
      call (mtvec, t0) = csrrw_proc(mtvec, t0);
      call (pmpaddr0, zero) = csrrw_proc(pmpaddr0, a5);
      call (pmpcfg0, zero) = csrrw_proc(pmpcfg0, a4);
      call () = fence_proc();
      call (mtvec, zero) = csrrw_proc(mtvec, t0);
      call (zero) = addi_proc(zero, 0bv64);
      call (s0) = ld_proc(sp + 40bv64);
      call (sp) = addi_proc(sp, 48bv64);
      call (zero) = jalr_proc(ra);
    }

  procedure PMP_SET_0_func() 
    modifies pc, t0, ra, a5, exception, sp, pmpcfg0, zero, s0, mem, mtvec, a4, a0, current_priv, pmpaddr0, a1;
    requires (zero == 0bv64 && exception == 0bv64);
    requires (pc == 2126bv64);
    ensures ((exception == 0bv64) ==> (pmpaddr0 == old(a0)));
    ensures ((exception == 0bv64) ==> (pmpcfg0 == ((old(pmpcfg0) & -256bv64) | old(a1))));
    {
      if (pc == 2126bv64) {
        call atomic_block_0x84c();
      }

    }


  init {
  }

  next {
  }

  control {
    f = verify(PMP_SET_0_func);
    check;
    print_results;
  }
}
