use std::collections::HashSet;

use crate::readers::dwarfreader::{DwarfCtx, DwarfTypeDefn};
use crate::spec_lang::sl_ast as ast;
use crate::spec_lang::sl_lexer::{Tok, LexError};
use crate::system_model;
use crate::utils;

/// A grammar defined with
/// (1) an input string of the specification `input`,
/// (2) a DWARF context `dwarf_ctx` containing information about the
///     function signatures, global variables, and types
/// (3) `curr_fn` is a stateful variable that keeps track of which function
///     the parser is currently parsing specifications for.
///     `curr_fn` is set whenever a new FuncSpec is parsed
grammar<'input>(input: &'input str, dwarf_ctx: &DwarfCtx, curr_fn: &mut String);

pub Spec: ast::Spec = {
    "ensures" <e:BExpr> ";" => ast::Spec::Ensures(e),
    "requires" <e:BExpr> ";" => ast::Spec::Requires(e),
    "modifies" <ids:ModSet> ";" => ast::Spec::Modifies(ids.iter().map(|s| s.to_string()).collect()),
    "track" "[" <id:"id"> "]" <e:VExpr> ";" => ast::Spec::Track(id.to_string(), e),
}

pub ModSet: HashSet<&'input str> = {
    <mut ms: ModSet> "," <id: "id"> => {
        ms.insert(id);
        ms
    },
    "id" => {
        let mut ms = HashSet::new();
        ms.insert(<>);
        ms
    },
}

pub Specs: Vec<ast::Spec> = {
    <Spec*> => <>,
}

pub FuncSpec: ast::FuncSpec = {
    "fun" <id:FuncId> "{" <ss:Specs> "}" => {
        ast::FuncSpec{fname: id, specs: ss}
    },
}

pub FuncId: String = {
    "id" => {
        *curr_fn = <>.to_string();
        <>.to_string()
    }
}

pub FuncSpecs: Vec<ast::FuncSpec> = {
    <FuncSpec*> => <>,
}

pub BExpr: ast::BExpr = {
    <e1:BExpr2> <op:InfixBoolOp> <e2:BExpr> => ast::BExpr::BOpApp(op, vec![e1, e2]),
    <op:PrefixBoolOp> <e:BExpr> => ast::BExpr::BOpApp(op, vec![e]),
    <e1:VExpr> <op:CompOp> <e2:VExpr> => {
        let operands = vec![e1, e2];
        ast::BExpr::COpApp(op, operands)
    },
    BExpr2,
}

pub BExpr2: ast::BExpr = {
    "true" => ast::BExpr::Bool(true),
    "false" => ast::BExpr::Bool(false),
    "(" <e: BExpr> ")" => e,
}

pub VarDecl: (ast::VExpr, ast::VType) = {
    <v:Ident> ":" <typ:TypeDecl> => (v, typ),
}

pub TypeDecl: ast::VType = {
    "bv_type" => {
        match <> {
            Tok::BvType(width) => ast::VType::Bv(width),
            _ => panic!("Not a valid type declaration: {:#?}.", <>),                
        }
    },
}

pub InfixBoolOp: ast::BoolOp = {
    "|" "|" => ast::BoolOp::Disj,
    "&" "&" => ast::BoolOp::Conj,
    "=" "=" ">" => ast::BoolOp::Implies,
}

pub PrefixBoolOp: ast::BoolOp = {
    "!" => ast::BoolOp::Neg,
    "forall" "(" <vd: VarDecl> ")" "::" => {
        let (var, typ) = vd;
        ast::BoolOp::Forall(var, typ)
    },
    "exists" "(" <vd: VarDecl> ")" "::" => {
        let (var, typ) = vd;
        ast::BoolOp::Exists(var, typ)
    },
}

pub CompOp: ast::CompOp = {
    ">" => ast::CompOp::Gt,
    "<" => ast::CompOp::Lt,
    ">" "=" => ast::CompOp::Geq,
    "<" "=" => ast::CompOp::Leq,
    ">" "_u" => ast::CompOp::Gtu,
    "<" "_u" => ast::CompOp::Ltu,
    ">" "=" "_u" => ast::CompOp::Geu,
    "<" "=" "_u" => ast::CompOp::Leu,
    "=" "=" => ast::CompOp::Equal,
    "!" "=" => ast::CompOp::Nequal,
}

pub VExpr: ast::VExpr = {
    <e1:VExpr> <op:ValueOp1> <e2:VExpr2> => {
        let operands = vec![e1, e2];
        let typ = ast::VType::infer_op_type(&op, &operands);
        ast::VExpr::OpApp(op, operands, typ)
    },
    <a:VExpr> "[" <ind:VExpr> "]" => {
        let op = ast::ValueOp::ArrayIndex;
        let operands = vec![a, ind];
        let typ = ast::VType::infer_op_type(&op, &operands);
        ast::VExpr::OpApp(op, operands, typ)
    },
    <s:VExpr> "." <f:"id"> => {
        assert!(f.to_string().chars().all(char::is_alphanumeric), "Invalid get field .{}.", f.to_string());
        let op = ast::ValueOp::GetField;
        let field_typ = match s.typ() {
            ast::VType::Struct { id:_, fields, size:_ } => {
                *fields.get(&f[..])
                    .expect(&format!("Unable to find struct field {}.", f))
                    .clone()
            },
            _ => panic!("Expected struct type: {:?}.", s)
        };
        let operands = vec![s, ast::VExpr::Ident(f.to_string(), field_typ)];
        let typ = ast::VType::infer_op_type(&op, &operands);
        ast::VExpr::OpApp(op, operands, typ)
    },
    <bv:VExpr> "[" <lo:"int"> ":" <hi:"int"> "]" => {
        if let Tok::Int(lo_u64) = lo {
            if let Tok::Int(hi_u64) = hi {
                let op = ast::ValueOp::Slice{lo: lo_u64 as u16, hi: hi_u64 as u16};
                let operands = vec![bv];
                let typ = ast::VType::infer_op_type(&op, &operands);
                ast::VExpr::OpApp(op, operands, typ)
            } else {
                panic!("Invalid right (high) slice value.");
            }
        } else {
            panic!("Invalid left (low) slice value.");
        }
    },
    VExpr2,
}

// Last precedence value operators
pub ValueOp1: ast::ValueOp = {
    "+" => ast::ValueOp::Add,
    "-" => ast::ValueOp::Sub,
    "^" => ast::ValueOp::BvXor,
    "&" => ast::ValueOp::BvAnd,
    "|" => ast::ValueOp::BvOr,
}

pub VExpr2: ast::VExpr = {
    <e1:VExpr2> <op:ValueOp2> <e2:Term> => {
        let operands = vec![e1, e2];
        let typ = ast::VType::infer_op_type(&op, &operands);
        ast::VExpr::OpApp(op, operands, typ)
    },
    Term,
}

// Second last precedence value operators
pub ValueOp2: ast::ValueOp = {
    "/" => ast::ValueOp::Div,
    "*" => ast::ValueOp::Mul,
    ">>" => ast::ValueOp::RightShift,
    ">>>" => ast::ValueOp::URightShift,
    "<<" => ast::ValueOp::LeftShift,
    "++" => ast::ValueOp::Concat,
}

pub Term: ast::VExpr = {
    "bool" => {
        if let Tok::Bool(b) = <> {
            ast::VExpr::Bool(b, ast::VType::Bool)
        } else {
            panic!("Implementation error: bool should be Tok::Bool(..) enum type.")
        }
    },
    <m:"-"?> <i:"int"> => {
        if let Tok::Int(i) = i {
            let si = if m.is_some() {
                -i
            } else {
                i
            };
            ast::VExpr::Int(si, ast::VType::Int)
        } else {
            panic!("Implementation error: bool should be Tok::Int(..) enum type.")
        }
    },
    "bv" => {
        if let Tok::Bv { value, width } = <> {
            ast::VExpr::Bv{value, typ: ast::VType::Bv(width)}
        } else {
            panic!("Implementation error: bool should be Tok::Bv(..) enum type.")
        }
    },
    <f:BuiltIn> "(" <es:CommaSepVExprs> ")" => {
        let typ = ast::VType::infer_func_app_type(&f[..], &es);
        match &f[..] {
            "value" => ast::VExpr::OpApp(ast::ValueOp::Deref, es, typ),
            _ => ast::VExpr::FuncApp(f, es, typ),
        }
    },
    Ident,
    "(" <e:VExpr> ")" => e,
}

pub CommaSepVExprs: Vec<ast::VExpr> = {
    <mut vexprs: CommaSepVExprs> "," <e: VExpr> => {
        vexprs.push(e);
        vexprs
    },
    VExpr => {
        vec![<>]
    },
}

pub BuiltIn: String = {
    "old" => "old".to_string(),
    "sext" => "sext".to_string(),
    "uext" => "uext".to_string(),
    "value" => "value".to_string(),
}

pub Ident: ast::VExpr = {
    <d:"$"?> <id:"id"> => match d {
        Some(d) => {
            let xlen = dwarf_ctx.xlen;
            let var_id = id.to_string();
            let vtype = match &var_id[..] {
                system_model::PC_VAR => ast::VType::from_ast_type(&system_model::pc_type(xlen)),
                system_model::RETURNED_FLAG => ast::VType::from_ast_type(&system_model::returned_type()),
                system_model::PRIV_VAR => ast::VType::from_ast_type(&system_model::priv_type()),
                system_model::MEM_VAR => ast::VType::from_ast_type(&system_model::mem_type(xlen)),
                system_model::A0 => ast::VType::from_ast_type(&system_model::bv_type(xlen)),
                _ => panic!("Unimplemented type for variable ${}.", &var_id),
            };
            ast::VExpr::Ident(id.to_string(), vtype)
        },
        None => {
            let var_id = id.to_string();
            let mut dwarf_type: Option<DwarfTypeDefn> = None;
            // Variable is a formal argument
            let func_sig = dwarf_ctx
                .func_sigs()
                .get(curr_fn);
            if let Some(fs) = func_sig {
                let formal_arg = fs
                    .args
                    .iter()
                    .find(|dv| dv.name == var_id);
                if let Some(fa) = formal_arg {
                    dwarf_type = Some((*fa.typ_defn).clone());
                }
            }
            // Variable is a global variable
            // Note: formals take precedence over global variables
            let mut is_global = false;
            if dwarf_type.is_none() {
                let dt_res = dwarf_ctx.global_var_type(&var_id);
                assert!(dt_res.is_ok(), "Unable to find global variable type for {} in DWARF info. {}", &var_id, curr_fn);
                dwarf_type = Some((*dt_res.unwrap()).clone());
                is_global = true;
            }
            assert!(dwarf_type.is_some(), "Unable to find variable {} in DWARF info.", &var_id);
            let vtype = ast::VType::from_dwarf_type(&dwarf_type.unwrap());
            if is_global {
                ast::VExpr::Ident(format!("{}", id), vtype)
            } else {
                // FIXME: formals are all xlen for now
                ast::VExpr::Ident(id.to_string(), ast::VType::Bv(dwarf_ctx.xlen as u16))
            }
        },
    }
}

extern {
    type Location = usize;
    type Error = LexError;
    
    enum Tok<'input> {
        // Keywords;
        "ensures" => Tok::Ensures,
        "requires" => Tok::Requires,
        "modifies" => Tok::Modifies,
        "track" => Tok::Track,
        "fun" => Tok::Fun,
        "true" => Tok::True,
        "false" => Tok::False,
        "old" => Tok::Old,
        "forall" => Tok::Forall,
        "exists" => Tok::Exists,
        "_u" => Tok::UnsignedCompExt,
        // Builtin functions
        ">>" => Tok::RightShift,    // >>
        ">>>" => Tok::URightShift,  // >>>
        "<<" => Tok::LeftShift,     // <
        "sext" => Tok::SignedExt,   // sext
        "uext" => Tok::UnsignedExt, // uext
        "value" => Tok::Value,      // value
        "++" => Tok::Concat,        // ++
        // Identifier
        "id" => Tok::Id(<&'input str>),
        // Primitives
        "int" => Tok::Int(i64),
        "bv" => Tok::Bv { value: u64, width: u16 },
        "bool" => Tok::Bool(bool),
        // Types
        "bv_type" => Tok::BvType(u16),
        // Symbols
        ":" => Tok::Colon,          // :
        "::" => Tok::ColonColon,    // ::
        ";" => Tok::Semi,           // ;
        "," => Tok::Comma,          // ,
        "." => Tok::Dot,            // .
        "=" => Tok::Equals,         // =
        ">" => Tok::GreaterThan,    // >
        "<" => Tok::LessThan,       // <
        "+" => Tok::Plus,           // +
        "-" => Tok::Minus,          // -
        "?" => Tok::Question,       // ?
        "*" => Tok::Asterisk,       // *
        "/" => Tok::Slash,          // /
        "&" => Tok::Ampersand,      // &
        "|" => Tok::Pipe,           // |
        "~" => Tok::Tilde,          // ~
        "!" => Tok::Bang,           // !
        "^" => Tok::Caret,          // ^
        "$" => Tok::Dollar,         // $
        "{" => Tok::LeftBrace,      // {
        "[" => Tok::LeftBracket,    // [
        "(" => Tok::LeftParen,      // (
        "}" => Tok::RightBrace,     // }
        "]" => Tok::RightBracket,   // ]
        ")" => Tok::RightParen,     // )
    }
}